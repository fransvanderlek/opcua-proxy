<?xml version="1.0" encoding="UTF-8"?>

<!-- Using Camel as a OPCUA proxy via MQTT -->
<!--

Some ideas to improve:
- leverage UANodeSet: export a UANodeSet from the source server and import in replica server, see also:https://github.com/digitalpetri/opc-ua-nodeset-parser. This likely requires instantiating a OPCUA server seperately from camel, see also: https://github.com/eclipse/milo/blob/master/milo-examples/server-examples/src/main/java/org/eclipse/milo/examples/server/ExampleServer.java. Spring bean? or change camel 
implementationhttps://github.com/apache/camel/blob/b63b6d0f79c921827b89b4e875a8196512404a49/components/camel-milo/src/main/java/org/apache/camel/component/milo/server/internal/CamelNamespace.java#L52
- abstract mqtt brokerUrl, milo client url, etc. possibly introduce properties file or extra beans
- make node-id part of mqtt message, simplifying the topic structure
- make milo server component more generic, not needing itemId, see https://github.com/apache/camel/blob/b63b6d0f79c921827b89b4e875a8196512404a49/components/camel-milo/src/main/java/org/apache/camel/component/milo/server/MiloServerConsumer.java#L56, perhaps with a more facade CamelServerItem https://github.com/apache/camel/blob/b63b6d0f79c921827b89b4e875a8196512404a49/components/camel-milo/src/main/java/org/apache/camel/component/milo/server/MiloServerEndpoint.java#L80

-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
       
   	
   	<!-- the embedded opcua server running inside camel based on eclipse Milo -->
   	<bean id="opcua-server"
		class="org.apache.camel.component.milo.server.MiloServerComponent">
		<property name="enableAnonymousAuthentication" value="true" />
		<property name="port" value="12685"/>
		<property name="bindAddresses" value="0.0.0.0"/>
		<property name="applicationName" value="camel-opcua"/>
	</bean>   
	
	<!-- this bean converts json to DataValue object and vice versa -->
	<bean id="gson" class="org.apache.camel.component.gson.GsonDataFormat">     
        <property name="unmarshalType" value="org.eclipse.milo.opcua.stack.core.types.builtin.DataValue"/>   
    </bean>
     
	<camelContext xmlns="http://camel.apache.org/schema/spring">

   	    <!-- ############################## -->
		<!-- #        TEMPERATURE         # -->
		<!-- ############################## -->	
		
		<!-- SOURCE_TO_REPLICA -->
		
		<endpoint id="mqtt-temperature-status" uri="paho:IntelligentIndustryExperience/device-1/temperature/status?brokerUrl=tcp://test.mosquitto.org:1883"/>
 		<endpoint id="mqtt-led-status" uri="paho:IntelligentIndustryExperience/device-1/led/status?brokerUrl=tcp://test.mosquitto.org:1883"/>
 		<endpoint id="mqtt-led-command" uri="paho:IntelligentIndustryExperience/device-1/led/command?brokerUrl=tcp://test.mosquitto.org:1883"/>
 
 		<endpoint id="originserver-temperature-subscriber" uri="milo-client:opc.tcp://192.168.1.201:4840?node=RAW(ns=1;s=temperature)&amp;samplingInterval=1000&amp;allowedSecurityPolicies=None"/>
 		<endpoint id="originserver-led-subscriber" uri="milo-client:opc.tcp://192.168.1.201:4840?node=RAW(ns=1;s=Control Relay number 0.)&amp;samplingInterval=1000&amp;allowedSecurityPolicies=None"/>
 		<endpoint id="originserver-led-writer" uri="milo-client:opc.tcp://192.168.1.201:4840?node=RAW(ns=1;s=Control Relay number 0.)"/>
 
	
	    <route id="opcua_source_temperature-to-broker">
			<from ref="opcua-originserver-subscriber" />
       			<marshal>
       				<custom ref="gson"/>
       			</marshal>
       			<convertBodyTo type="java.lang.String"/>
        	<to ref="mqtt-temperature-status" />
		</route>
		
		<route id="broker-to-opcua_replica_temperature">
			<from ref="mqtt-temperature-status"/>
   				<convertBodyTo type="java.lang.String"/>
   				<unmarshal>
   					<custom ref="gson"/>
   				</unmarshal>
      			<log message="${body}" />
    		<to uri="opcua-server:temperature" />
    	</route>
    	
    	<!-- ############################## -->
		<!-- #           LED              # -->
		<!-- ############################## -->	
		
		<!-- SOURCE_TO_REPLICA -->
    	
    	<route id="opcua_source_led-to-broker">
			<from ref="originserver-led-subscriber" />
       			<marshal>
       				<custom ref="gson"/>
       			</marshal>
       			<convertBodyTo type="java.lang.String"/>
        	<to ref="mqtt-led-status"/>
		</route>
			
		
		<route id="broker-to-opcua_replica_led">
			<from ref="mqtt-led-status"/>
   				<convertBodyTo type="java.lang.String"/>
   				<unmarshal>
   					<custom ref="gson"/>
   				</unmarshal>
      			<log message="${body}" />
    		<to uri="opcua-server:led" />
    	</route>
    	
    	<!-- REPLICA_TO_SOURCE -->

		<route id="opcua_replica_led-to-mqtt">
		
			<!-- the itemId in the uri should match the one being updated in the replication routes-->
			<from uri="opcua-server:led"/>
      			<marshal>
       				<custom ref="gson"/>
       			</marshal>
       			<convertBodyTo type="java.lang.String"/>
   			<to uri="log:intelligentindustry?level=INFO"/>
        	<to ref="mqtt-led-command"/> 	
    	</route>
    	
		<route id="broker-to-opcua_source_led">
			<from ref="mqtt-led-command"/>
   				<convertBodyTo type="java.lang.String"/>
   				<unmarshal>
   					<custom ref="gson"/>
   				</unmarshal>
   			<to uri="log:intelligentindustry?level=INFO"/>
			<to ref="originserver-led-writer" />	
    	</route>
    	
    	
  </camelContext>

</beans>
